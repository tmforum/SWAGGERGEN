package {{package}};

{{#imports}}import {{import}};
{{/imports}}

import io.swagger.annotations.ApiParam;
import com.infy.cache.interceptor.CacheRestInterceptor;
import com.infy.cache.util.CacheRequestContext;
import com.infy.resilience.interceptor.ResilienceRestInterceptor;
import com.infy.api.util.APIContext;

import javax.inject.Inject;
import javax.interceptor.Interceptors;
import javax.ws.rs.container.AsyncResponse;
import javax.ws.rs.container.Suspended;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.Request;
import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.*;

import javax.ejb.Asynchronous;
import javax.ejb.EJB;
import javax.enterprise.context.RequestScoped;
import com.infy.resilience.util.ResilienceContext;

@RequestScoped
@Path("/{{baseName}}")
{{#hasConsumes}}@Consumes({ {{#consumes}}"{{mediaType}}"{{#hasMore}}, {{/hasMore}}{{/consumes}} }){{/hasConsumes}}
{{#hasProduces}}@Produces({ {{#produces}}"{{mediaType}}"{{#hasMore}}, {{/hasMore}}{{/produces}} }){{/hasProduces}}
@io.swagger.annotations.Api(value = "/{{baseName}}", description = "the {{baseName}} API")
{{>generatedAnnotation}}
{{#operations}}
public class {{classname}}  {
	
	@EJB
	{{classname}}Service service;

	@Inject
    CacheRequestContext cacheRequestContext;
	
	@Inject
    private ResilienceContext resilienceContext;

@Interceptors({CacheRestInterceptor.class, ResilienceRestInterceptor.class})
@Asynchronous
{{#operation}}
    @{{httpMethod}}
    {{#subresourceOperation}}@Path("{{path}}"){{/subresourceOperation}}
    {{#hasConsumes}}@Consumes({ {{#consumes}}"{{mediaType}}"{{#hasMore}}, {{/hasMore}}{{/consumes}} }){{/hasConsumes}}
    {{#hasProduces}}@Produces({ {{#produces}}"{{mediaType}}"{{#hasMore}}, {{/hasMore}}{{/produces}} }){{/hasProduces}}
    @io.swagger.annotations.ApiOperation(value = "{{{summary}}}", notes = "{{{notes}}}", response = {{{returnType}}}.class{{#returnContainer}}, responseContainer = "{{{returnContainer}}}"{{/returnContainer}}{{#hasAuthMethods}}, authorizations = {
        {{#authMethods}}@io.swagger.annotations.Authorization(value = "{{name}}"{{#isOAuth}}, scopes = {
            {{#scopes}}@io.swagger.annotations.AuthorizationScope(scope = "{{scope}}", description = "{{description}}"){{#hasMore}},
            {{/hasMore}}{{/scopes}}
        }{{/isOAuth}}){{#hasMore}},
        {{/hasMore}}{{/authMethods}}
    }{{/hasAuthMethods}})
    @io.swagger.annotations.ApiResponses(value = { {{#responses}}
        @io.swagger.annotations.ApiResponse(code = {{{code}}}, message = "{{{message}}}", response = {{{returnType}}}.class{{#returnContainer}}, responseContainer = "{{{returnContainer}}}"{{/returnContainer}}){{#hasMore}},
        {{/hasMore}}{{/responses}} })

    public void {{nickname}}({{#allParams}}{{>queryParams}}{{>pathParams}}{{>headerParams}}{{>bodyParams}}{{>formParams}}{{#hasMore}},
    {{/hasMore}}{{/allParams}},@Suspended AsyncResponse asyncResponse,
            @Context HttpServletRequest request, @Context Request rsRequest)
    throws Exception {
	try {
		APIContext context = new APIContext();
		{{#allParams}}{{>contextQueryParams}}{{/allParams}}
		{{#allParams}}{{>contextPathParams}}{{/allParams}}
		{{#allParams}}{{>contextHeaderParams}}{{/allParams}}
        Object response = service.{{nickname}}(context,resilienceContext.clone(),cacheRequestContext.clone());
			if(response != null && !asyncResponse.isDone() && !asyncResponse.isCancelled() && !asyncResponse.isSuspended()){
				asyncResponse.resume(response);
			}
		} catch (Exception ex) {
            if (!asyncResponse.isDone() && !asyncResponse.isCancelled() && !asyncResponse.isSuspended()) {
                asyncResponse.resume(ex);
            }
        }
    }
{{/operation}}
}
{{/operations}}

